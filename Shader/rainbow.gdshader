shader_type canvas_item;

uniform float strength: hint_range(0., 1.) = 0.3;
uniform float speed: hint_range(0., 10.) = 0.5;
uniform float angle: hint_range(0., 360.) = 0.;
uniform vec4 color_filter: source_color;
uniform float precision: hint_range(0., 1.) = 0.1;

const float frequancy = 6.0;

void fragment() {
	float hue = UV.x * cos(radians(angle)) - UV.y * sin(radians(angle));
	float time = TIME * speed;
	
	vec3 rainbow = vec3(
        (sin(hue * frequancy + time + frequancy * 0.0/3.0)) + 0.5,
		(sin(hue * frequancy + time + frequancy * 1.0/3.0)) + 0.5,
		(sin(hue * frequancy + time + frequancy * 2.0/3.0)) + 0.5
    );
	
	vec4 color = texture(TEXTURE, UV);
	if (distance(color, color_filter) <= precision){
		COLOR = mix(color, vec4(rainbow, color.a), strength);
	}
	else
	{
		COLOR = color;
	}
}